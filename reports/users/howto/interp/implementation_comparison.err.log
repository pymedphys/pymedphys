Traceback (most recent call last):
  File "/home/runner/work/pymedphys/pymedphys/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/work/pymedphys/pymedphys/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/work/pymedphys/pymedphys/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/work/pymedphys/pymedphys/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/work/pymedphys/pymedphys/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/work/pymedphys/pymedphys/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/work/pymedphys/pymedphys/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
implementations = {
    "PyMedPhys default": pymedphys.interpolate.interp,
    "PyMedPhys skip checks": interp3d_pymedphys_skip_checks,
    "PyMedPhys low-level API": pymedphys.interp_linear_3d,
    "EconForge": interp3d_econforge,
    "Scipy": interp3d_scipy,
}


def benchmark(
    n_values: Sequence[int],
    interpolation_multiples: Sequence[int],
    fixed_n: int,
    fixed_multiple: int,
    implementations: dict,
):
    results = {
        "Performance with varying N": {
            "N values": n_values,
            "times": {name: [] for name in implementations.keys()},
            "fixed multiple": fixed_multiple,
        },
        "Performance with varying interpolation multiple": {
            "interpolation multiples": interpolation_multiples,
            "times": {name: [] for name in implementations.keys()},
            "fixed n": fixed_n,
        },
    }

    for n in n_values:
        run_combo(
            n, fixed_multiple, implementations, results["Performance with varying N"]
        )

    for multiple in interpolation_multiples:
        run_combo(
            fixed_n,
            multiple,
            implementations,
            results["Performance with varying interpolation multiple"],
        )

    return results


def run_combo(n, multiple, implementations, result):
    x = y = z = np.linspace(0, 1, n, dtype=np.float64)
    values = np.random.rand(n, n, n)

    xi = yi = zi = np.linspace(0, 1, n * multiple)
    points = np.column_stack(
        [mgrid.ravel() for mgrid in np.meshgrid(xi, yi, zi, indexing="ij")]
    )

    for name, f_interp in implementations.items():
        time = (
            timeit.timeit(
                lambda: f_interp(tuple((x, y, z)), values, points_interp=points),
                number=3,
            )
            / 3
        )
        result["times"][name].append(time)

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn[5], line 4[0m
[1;32m      1[0m implementations [38;5;241m=[39m {
[1;32m      2[0m     [38;5;124m"[39m[38;5;124mPyMedPhys default[39m[38;5;124m"[39m: pymedphys[38;5;241m.[39minterpolate[38;5;241m.[39minterp,
[1;32m      3[0m     [38;5;124m"[39m[38;5;124mPyMedPhys skip checks[39m[38;5;124m"[39m: interp3d_pymedphys_skip_checks,
[0;32m----> 4[0m     [38;5;124m"[39m[38;5;124mPyMedPhys low-level API[39m[38;5;124m"[39m: [43mpymedphys[49m[38;5;241;43m.[39;49m[43minterp_linear_3d[49m,
[1;32m      5[0m     [38;5;124m"[39m[38;5;124mEconForge[39m[38;5;124m"[39m: interp3d_econforge,
[1;32m      6[0m     [38;5;124m"[39m[38;5;124mScipy[39m[38;5;124m"[39m: interp3d_scipy,
[1;32m      7[0m }
[1;32m     10[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mbenchmark[39m(
[1;32m     11[0m     n_values: Sequence[[38;5;28mint[39m],
[1;32m     12[0m     interpolation_multiples: Sequence[[38;5;28mint[39m],
[0;32m   (...)[0m
[1;32m     15[0m     implementations: [38;5;28mdict[39m,
[1;32m     16[0m ):
[1;32m     17[0m     results [38;5;241m=[39m {
[1;32m     18[0m         [38;5;124m"[39m[38;5;124mPerformance with varying N[39m[38;5;124m"[39m: {
[1;32m     19[0m             [38;5;124m"[39m[38;5;124mN values[39m[38;5;124m"[39m: n_values,
[0;32m   (...)[0m
[1;32m     27[0m         },
[1;32m     28[0m     }

[0;31mAttributeError[0m: module 'pymedphys' has no attribute 'interp_linear_3d'

