name: Library

on:
  push:
    branches:
      - main
  pull_request:
  workflow_run:
    workflows: ["Security Scan"]
    types:
      - completed
  release:
    types:
      - created

jobs:
  # =============================================================================
  PreCommit:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Cache virtualenv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-precommit-${{ runner.os }}-${{ hashFiles('uv.lock') }}

      - name: Install pre-commit deps (uv extras dev)
        run: |
          uv lock
          uv sync --extra dev

      - name: Pre-commit cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-cache-${{ runner.os }}

      - name: Run Pre-Commit
        run: |
          uv run -- pre-commit run --all-files

      - name: Fix any issues
        id: fix_issues
        if: failure()
        run: |
          git config --local user.email "pre-commit-bot@pymedphys.com"
          git config --local user.name "PyMedPhys Pre-Commit Bot"
          # Re-run hooks but do not fail the job
          uv run -- pre-commit run --all-files || true
          git add -A
          if git diff --cached --quiet; then
            echo "nochanges=true" >> $GITHUB_OUTPUT
          else
            git commit -m "Fix pre-commit failures"
          fi

      - name: Get GitHub App token for installation
        id: generate-token
        if: failure() && steps.fix_issues.outputs.nochanges != 'true'
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.PYMEDPHYS_CI_BOT_ID }}
          private_key: ${{ secrets.PYMEDPHYS_CI_BOT_TOKEN }}

      - name: Push changes
        if: failure() && steps.fix_issues.outputs.nochanges != 'true'
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          branch: ${{ github.event.pull_request.head.ref }}

  # =============================================================================
  Tests:
    # Skip this job if the workflow was triggered by a failed security scan
    if: github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success'

    env:
      FORCE_COLOR: true
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu", "macos", "windows"]
        task: ["tests", "docs", "stackoverflow", "updates", "cypress", "slow", "pyright", "propagate"]
        exclude:
          - os: "windows"
            task: "stackoverflow"
          - os: "windows"
            task: "updates"
          - os: "windows"
            task: "slow"
          - os: "windows"
            task: "pyright"
          - os: "windows"
            task: "propagate"
          - os: "windows"
            task: "cypress"

          - os: "macos"
            task: "stackoverflow"
          - os: "macos"
            task: "updates"
          - os: "macos"
            task: "cypress"
          - os: "macos"
            task: "slow"
          - os: "macos"
            task: "pyright"
          - os: "macos"
            task: "propagate"

        include:
          - os: "ubuntu"
            python-version: "3.12"
          - os: "windows"
            python-version: "3.10"
          - os: "macos"
            python-version: "3.12"

    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        if: matrix.task != 'propagate'

      - uses: actions/checkout@v4
        if: matrix.task == 'propagate'
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: |
          version="$(python - <<'PY'
          import sys
          print('-'.join(str(v) for v in sys.version_info))
          PY
          )"
          echo "version=$version" >> "$GITHUB_OUTPUT"


      # -----------------------------------------------------------------------------
      # Cache the virtualenv created by uv (per task, per OS, per Python, per lockfile)
      - name: Cache virtualenv
        uses: actions/cache@v3
        with:
          path: .venv


      # -----------------------------------------------------------------------------
      # Cache the virtualenv created by uv (per task, per OS, per Python, per lockfile)
      - name: Cache virtualenv
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ matrix.task }}-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('uv.lock') }}

      # -----------------------------------------------------------------------------
      # Build wheel with zero deps to sanity-check packaging, import CLI, then remove
      - name: Build wheel
        if: matrix.task == 'tests'
        run: |
          uv build

      - name: Create virtualenv
        if: matrix.task == 'tests'
        run: uv venv

      - name: Install wheel (Windows)
        if: matrix.task == 'tests' && matrix.os == 'windows'
        shell: pwsh
        run: |
          uv pip install (Get-Item .\dist\*.whl)

      - name: Install wheel (non-Windows)

        if: matrix.task == 'tests' && matrix.os != 'windows'
        run: |
          uv pip install ./dist/*.whl

      - name: Run clean tests (import checks)
        if: matrix.task == 'tests'
        run: |
          uv run -- pymedphys --help
          uv run -- python -c "import pymedphys"
          uv run -- python -c "import pymedphys.beta"
          uv run -- python -c "import pymedphys.experimental"

      - name: Remove base install of pymedphys
        if: matrix.task == 'tests'
        run: |
          uv pip uninstall -y pymedphys

      # -----------------------------------------------------------------------------
      # Install per task using uv extras/groups

      # Stackoverflow example env (user extra only)
      - name: Install a plain environment
        if: matrix.task == 'stackoverflow'
        run: |
          uv lock
          uv sync --extra user

      # Docs env
      - name: Install a docs environment
        if: matrix.task == 'docs'
        run: |
          uv lock
          uv sync --extra docs

      # Tests / doctests / cypress / slow / pyright envs
      - name: Install a tests/doctests environment
        if: matrix.task == 'tests' || matrix.task == 'cypress' || matrix.task == 'slow' || matrix.task == 'pyright'
        run: |
          uv lock
          uv sync --extra user --extra tests --extra doctests

      # Propagate env (allow lock update if needed)
      - name: Install a propagate environment
        if: matrix.task == 'pyright' || matrix.task == 'propagate'
        shell: bash
        run: |
          set -e
          uv lock || uv lock --upgrade
          uv sync --extra propagate || (uv lock --upgrade && uv sync --extra propagate)

      # Updates task: refresh lock then install
      - name: Update all packages then install with tests and user environment
        if: matrix.task == 'updates'
        run: |
          uv lock --upgrade
          uv sync --extra user --extra tests --extra docs

      # -----------------------------------------------------------------------------
      # Node for Cypress and the pinned pyright version (as in your original)
      - uses: actions/setup-node@v3
        if: matrix.task == 'cypress' || matrix.task == 'pyright' || matrix.task == 'build'
        with:
          node-version: "14"

      # -----------------------------------------------------------------------------
      # PyMedPhys data cache (replace poetry run with uv run)
      - name: Get PyMedPhys cache directory
        id: pymedphys-cache-location
        if: matrix.task != 'pyright'
        shell: bash
        run: |
          echo "dir=$(uv run -- python -c 'import pymedphys._config as cf; print(str(cf.get_config_dir()))')" >> $GITHUB_OUTPUT

      - name: PyMedPhys Cache
        id: pymedphys-cache
        if: matrix.task != 'pyright'
        uses: actions/cache@v3
        with:
          path: ${{ steps.pymedphys-cache-location.outputs.dir }}
          key: pymedphys-${{ matrix.task }}-${{ runner.os }}-${{ hashFiles('**/hashes.json') }}

      # -----------------------------------------------------------------------------
      # TESTS

      # Propagate smoke (unchanged intent)
      - name: See if propagate is needed
        if: matrix.task == 'propagate'
        id: propagate-test
        shell: bash
        run: |
          echo "status=before" >> $GITHUB_OUTPUT
          uv run -- python -c "print('propagate placeholder')"

      # Pyright (keep the pinned version)
      - name: Install and run pyright
        if: matrix.task == 'pyright'
        run: |
          npm install -g pyright@1.1.386
          uv run -- pyright

      # Pytest
      - name: Run basic pytest tests
        if: matrix.task == 'tests' || matrix.task == 'updates'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          uv run -- pymedphys dev tests -v

      # Doctest
      - name: Run doctest tests
        if: matrix.os == 'ubuntu' && matrix.task == 'tests'
        run: |
          uv run -- pymedphys dev doctests -v

      # Pylint
      - name: Run pylint tests
        if: matrix.os == 'ubuntu' && ( matrix.task == 'tests' || matrix.task == 'updates' )
        run: |
          uv run -- pymedphys dev lint

      # Slow
      - name: Run slow tests
        if: matrix.task == 'slow'
        run: |
          uv run -- pymedphys dev tests -v --slow

      # Docs data fetch
      - name: Download docs files
        if: matrix.task == 'docs' && matrix.os == 'ubuntu'
        run: |
          uv run -- python -c "import pymedphys; pymedphys.data_path('original_dose_beam_4.dcm'); pymedphys.data_path('logfile_dose_beam_4.dcm');"

      # Docs build
      - name: Build docs
        if: matrix.task == 'docs' || matrix.task == 'updates'
        run: |
          uv run -- pymedphys dev docs

      # GitHub Pages prep and deploy
      - name: Add GitHub Pages Config Files
        if: matrix.task == 'docs' && matrix.os == 'ubuntu' && github.event_name == 'push'
        run: |
          echo docs.pymedphys.com > lib/pymedphys/docs/_build/html/CNAME
          touch lib/pymedphys/docs/_build/html/.nojekyll

      - name: Deploy docs
        if: matrix.task == 'docs' && matrix.os == 'ubuntu' && github.event_name == 'push'
        uses: JamesIves/github-pages-deploy-action@4.1.3
        with:
          branch: docs
          folder: lib/pymedphys/docs/_build/html
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      # Stackoverflow examples
      - name: Run stackoverflow example(s)
        if: matrix.task == 'stackoverflow'
        run: |
          uv run -- python ./examples/stackoverflow/gamma.py

      # Cypress
      - name: Run Cypress tests
        if: matrix.task == 'cypress'
        run: |
          uv run -- pymedphys dev tests --cypress

      - uses: actions/upload-artifact@v4
        if: failure() && matrix.task == 'cypress'
        with:
          name: cypress-videos
          path: pymedphys/tests/e2e/cypress/videos
