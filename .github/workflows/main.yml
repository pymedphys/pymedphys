name: Main

on:
  push:

jobs:
  Pre-Commit:
    runs-on: ubuntu-latest

    steps:
      - name: Extract branch name
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Test branch name
        run: |
          echo ${{ steps.extract_branch.outputs.branch }}
      - uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - uses: actions/cache@v1
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-cache

      - name: Run Pre-Commit
        run: |
          pip install pre-commit
          pre-commit run --all-files
      - name: Fix any issues
        if: failure()
        run: |
          git config --local user.email "pre-commit-bot@pymedphys.com"
          git config --local user.name "PyMedPhys Pre-Commit Bot"
          git commit -m "Fix pre-commit failures" -a
          exit 1
      - name: Push changes
        if: failure()
        uses: ad-m/github-push-action@02b0b75
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.extract_branch.outputs.branch }}

  # Docs:
  #   runs-on: ubuntu-latest
  #   env:
  #     is_published: "No"

  #   steps:
  #     - uses: actions/checkout@v1
  #       with:
  #         fetch-depth: 1
  #     - name: Set up Python 3.7
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.7

  #     - uses: actions/cache@v1
  #       with:
  #         path: ~/.pymedphys
  #         key: pymedphys-data

  #     - uses: actions/cache@v1
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-

  #     - name: Install Pandoc
  #       run: |
  #         sudo apt-get install -y pandoc

  #     - name: Upgrade pip, install poetry
  #       run: |
  #         python -m pip install --upgrade pip poetry

  #     - name: Run poetry install
  #       run: |
  #         poetry install --no-dev -E docs -E library -E labs

  #     - name: Set Zenodo access token
  #       if: contains(github.ref, 'master')
  #       env:
  #         ZENODO_ACCESS_TOKEN: ${{ secrets.ZENODO_ACCESS_TOKEN }}
  #       run: |
  #         poetry add keyrings.alt
  #         git add -A
  #         git stash
  #         poetry run pymedphys zenodo set-token $ZENODO_ACCESS_TOKEN

  #     - name: Build docs, publish them to Zenodo if they have changed
  #       if: contains(github.ref, 'master')
  #       run: |
  #         poetry run pymedphys dev docs
  #         echo "::set-env name=is_published::$(poetry run pymedphys dev docs --publish | sed '$!d')"

  #     - uses: actions/cache@v1
  #       if: env.is_published == 'Published'
  #       with:
  #         path: ~/.cache/pre-commit
  #         key: pre-commit-cache

  #     - name: Prep for Pull Request
  #       if: env.is_published == 'Published'
  #       run: |
  #         pip install pre-commit
  #         pre-commit run --all-files || true

  #     - name: Create Pull Request
  #       if: env.is_published == 'Published'
  #       uses: peter-evans/create-pull-request@v1
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build docs
  #       if: contains(github.ref, 'master') == false
  #       run: |
  #         poetry run pymedphys dev docs

  Tox:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu', 'macos', 'windows']
        toxenv: ['pylint', 'docs', 'doctest', 'runslow', 'clean']
        include:
          - os: 'ubuntu'
            python-version: 3.6
          - os: 'windows'
            python-version: 3.7
          - os: 'macos'
            python-version: 3.7
        exclude:
          - os: 'windows'
            toxenv: 'pylint'
          - os: 'windows'
            toxenv: 'runslow'
          - os: 'macos'
            toxenv: 'runslow'

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos'
      run: |
        brew install freetds

    - name: Upgrade pip, install poetry and tox
      run: |
        python -m pip install --upgrade pip poetry tox

    - name: Run Tox on Windows
      if: matrix.os == 'windows'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-win

    - name: Run Tox on Nix
      if: matrix.os == 'macos' || matrix.os == 'ubuntu'
      run: |
        poetry run tox -e ${{ matrix.toxenv }}-nix


  WithUpdates:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu']
        python-version: [3.6]
        toxenv: ['pylint', 'doctest']

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      with:
        path: ~/.pymedphys
        key: pymedphys-data

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install FreeTDS on MacOS
      if: matrix.os == 'macos'
      run: |
        brew install freetds

    - name: Upgrade pip, install poetry and tox
      run: |
        python -m pip install --upgrade pip poetry tox

    - name: Run initial poetry install
      run: |
        poetry install

    - name: Run poetry update
      run: |
        poetry update

    - name: Run Tox if anything has changed
      run: |
        git add -A && git diff HEAD --name-only --exit-code || poetry run tox -e ${{ matrix.toxenv }}


  Examples:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu']
        toxenv: ['stackoverflow']
        python-version: [3.6]

    runs-on: ${{ matrix.os }}-latest

    steps:
    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Show python information
      run: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Linux')
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'macOS')
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - uses: actions/cache@v1
      if: startsWith(runner.os, 'Windows')
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Upgrade pip, install poetry and tox
      run: |
        python -m pip install --upgrade pip poetry tox

    - name: Run Tox
      run: |
        poetry run tox -e ${{ matrix.toxenv }}
