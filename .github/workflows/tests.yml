name: Tests

on:
  workflow_call:
    inputs:
      matrix:
        type: string
        default: full
        description: 'Matrix strategy: full, standard, minimal'
  workflow_dispatch:
    inputs:
      task:
        type: choice
        options: [tests, slow, pyright, cypress, coverage, all]

jobs:
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Define test matrix
        id: set-matrix
        uses: actions/github-script@v7
        with:
          script: |
            const matrices = {
              minimal: [
                {os: 'ubuntu-latest', python: '3.12', task: 'tests'}
              ],
              standard: [
                {os: 'ubuntu-latest', python: '3.12', task: 'tests'},
                {os: 'ubuntu-latest', python: '3.10', task: 'tests'},
                {os: 'windows-latest', python: '3.12', task: 'tests'},
                {os: 'macos-latest', python: '3.12', task: 'tests'}
              ],
              full: [
                {os: 'ubuntu-latest', python: '3.12', task: 'tests'},
                {os: 'ubuntu-latest', python: '3.11', task: 'tests'},
                {os: 'ubuntu-latest', python: '3.10', task: 'tests'},
                {os: 'windows-latest', python: '3.12', task: 'tests'},
                {os: 'windows-latest', python: '3.10', task: 'tests'},
                {os: 'macos-latest', python: '3.12', task: 'tests'},
                {os: 'ubuntu-latest', python: '3.12', task: 'slow'},
                {os: 'ubuntu-latest', python: '3.12', task: 'pyright'},
                {os: 'ubuntu-latest', python: '3.12', task: 'cypress'},
                {os: 'ubuntu-latest', python: '3.12', task: 'coverage'},
                {os: 'ubuntu-latest', python: '3.12', task: 'stackoverflow'}
              ]
            };

            const inputTask = '${{ inputs.task }}';
            let matrix;

            if (inputTask && inputTask !== 'all') {
              matrix = [{os: 'ubuntu-latest', python: '3.12', task: inputTask}];
            } else {
              matrix = matrices['${{ inputs.matrix }}'] || matrices.full;
            }

            core.setOutput('matrix', JSON.stringify({include: matrix}));

  test:
    needs: [define-matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}

    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ contains(matrix.task, 'slow') && 90 || contains(matrix.task, 'cypress') && 45 || 30 }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: |
            uv.lock
            pyproject.toml

      - name: Install task dependencies
        run: |
          EXTRAS=""
          case "${{ matrix.task }}" in
            tests|coverage|slow|cypress|pyright)
              EXTRAS="--extra user --extra tests --extra doctests"
              ;;
            stackoverflow)
              EXTRAS="--extra user"
              ;;
          esac
          uv sync --frozen $EXTRAS

      - name: Set up Node.js
        if: contains('cypress pyright', matrix.task)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ matrix.task == 'cypress' && 'npm' || '' }}

      - name: Cache PyMedPhys data
        uses: actions/cache@v4
        with:
          path: ~/.pymedphys
          key: pymedphys-data-${{ runner.os }}-${{ hashFiles('**/hashes.json') }}
          restore-keys: |
            pymedphys-data-${{ runner.os }}-

      - name: Run ${{ matrix.task }}
        shell: bash
        run: |
          set -euo pipefail

          case "${{ matrix.task }}" in
            tests)
              uv run pytest -xvs --durations=10
              if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
                uv run pymedphys dev doctests -v || true
                uv run pymedphys dev lint || true
              fi
              ;;
            coverage)
              uv run pytest --cov=pymedphys --cov-report=xml --cov-report=html --cov-report=term
              ;;
            slow)
              uv run pytest -v --slow --durations=50
              ;;
            pyright)
              npm install -g pyright@1.1.386
              uv run pyright
              ;;
            cypress)
              uv run pymedphys dev tests --cypress
              ;;
            stackoverflow)
              for script in examples/stackoverflow/*.py; do
                echo "Running: $script"
                uv run python "$script"
              done
              ;;
          esac

      - name: Upload coverage
        if: matrix.task == 'coverage'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-${{ matrix.os }}-${{ matrix.python }}-${{ matrix.task }}-${{ github.run_id }}
          path: |
            coverage.html/
            pymedphys/tests/e2e/cypress/videos/
            pymedphys/tests/e2e/cypress/screenshots/
            .pytest_cache/
          retention-days: 7
