name: "Tests"

on:
  workflow_call:
    inputs:
      mode:
        required: false
        type: string
        default: "standard"  # standard | full
      python-matrix:
        required: false
        type: string
        default: '["3.10","3.11","3.12","3.13"]'
      include-cypress:
        required: false
        type: boolean
        default: false
      extra-pytest-args:
        required: false
        type: string
        default: ""
    secrets:
      CYPRESS_RECORD_KEY:
        required: false

permissions:
  contents: read

jobs:
  unit:
    name: "unit (matrix)"
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup-project
        with:
          python-version: ${{ matrix.python-version }}
          cache-key-suffix: tests-${{ inputs.mode }}

      - name: Install
        shell: bash
        run: |
          uv pip install -e ".[dev,tests]" --system

      - name: Run pytest (mode-aware)
        shell: bash
        run: |
          set -euxo pipefail
          if [[ "${{ inputs.mode }}" == "full" ]]; then
            PYTEST_ARGS="${{ inputs.extra-pytest-args }}"
          else
            PYTEST_ARGS="-m 'not slow' ${{ inputs.extra-pytest-args }}"
          fi
          uv run pytest $PYTEST_ARGS --junitxml=test-results/junit-${{ matrix.python-version }}.xml || STATUS=$?
          echo "status=${STATUS:-0}" >> $GITHUB_OUTPUT

      - name: Upload results if they exist
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-${{ matrix.python-version }}-${{ inputs.mode }}
          if-no-files-found: ignore
          path: |
            ./test-results/**/*.xml
            ./coverage.xml
            ./htmlcov

  pyright:
    name: "pyright (full)"
    if: ${{ inputs.mode == 'full' }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-project
        with:
          python-version: "3.12"
          cache-key-suffix: pyright
      - name: Install runtime deps for type-check
        shell: bash
        run: |
          uv pip install -e ".[dev]" --system
          uv pip install pyright --system
      - name: Run pyright
        shell: bash
        run: uv run pyright

  slow:
    name: "slow tests (full)"
    if: ${{ inputs.mode == 'full' }}
    uses: ./.github/workflows/python-test.yml
    with:
      python-version: "3.12"
      pytest-args: "-m slow -q"
      cache-key-suffix: "slow"

  propagate:
    name: "propagate (full; runs only if script present)"
    if: ${{ inputs.mode == 'full' }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-project
        with:
          python-version: "3.12"
          cache-key-suffix: prop
      - name: Install dev
        shell: bash
        run: uv pip install -e ".[dev]" --system
      - name: Run propagate script if present
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -f scripts/propagate.sh ]]; then
            bash scripts/propagate.sh
          elif [[ -f tools/propagate.sh ]]; then
            bash tools/propagate.sh
          else
            echo "No propagate script found; skipping."
          fi

  stackoverflow:
    name: "stackoverflow (full; runs only if script present)"
    if: ${{ inputs.mode == 'full' }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-project
        with:
          python-version: "3.12"
          cache-key-suffix: so
      - name: Install dev
        shell: bash
        run: uv pip install -e ".[dev]" --system
      - name: Run SO script if present
        shell: bash
        run: |
          set -euxo pipefail
          if [[ -f scripts/stackoverflow.sh ]]; then
            bash scripts/stackoverflow.sh
          else
            echo "No stackoverflow script found; skipping."
          fi

  ui-e2e:
    name: "UI E2E (optional; Node+Cypress via npm)"
    if: ${{ inputs.mode == 'full' && inputs.include-cypress }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Detect cypress project
        id: detect
        shell: bash
        run: |
          if [[ -f package.json && -d cypress ]]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node
        if: steps.detect.outputs.present == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install deps
        if: steps.detect.outputs.present == 'true'
        shell: bash
        run: npm ci

      - name: Run Cypress (no third-party action)
        if: steps.detect.outputs.present == 'true'
        shell: bash
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx cypress verify
          npx cypress run || (echo "Cypress failures" && exit 1)

      - name: Upload Cypress artifacts if they exist
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          if-no-files-found: ignore
          path: |
            cypress/videos
            cypress/screenshots
