jobs:
  - job: Tox

    strategy:
      matrix:
        Pylint:
          image_name: ubuntu-16.04
          test_title: Pylint
          toxenv: pylint
          python: 3.7
        Docs:
          image_name: ubuntu-16.04
          test_title: Docs
          toxenv: docs
          python: 3.7
        Layer-Lint:
          image_name: ubuntu-16.04
          test_title: Layer-Lint
          toxenv: layer_lint
          python: 3.7
        # mypy:
        #   image_name: ubuntu-16.04
        #   test_title: mypy
        #   toxenv: mypy
        #   python: 3.7
        Linux-Py36:
          image_name: ubuntu-16.04
          test_title: Linux Py36
          toxenv: py36
          python: 3.6
        Linux-Py37:
          image_name: ubuntu-16.04
          test_title: Linux Py37
          toxenv: py37
          python: 3.7

    pool:
      vmImage: $(image_name)

    steps:
    - task: UsePythonVersion@0
      displayName: setup python
      inputs:
        versionSpec: $(python)

    - bash: "python -c \"import sys; print(sys.version); print(sys.executable)\""
      displayName: Show python information

    - bash: "python -m pip install -U pip setuptools --user"
      displayName: Upgrade pip and setuptools

    - bash: "python -m pip install -U tox --user"
      displayName: Install tox

    - bash: python -m tox -e $TOXENV --notest
      displayName: Install test dependencies

    - bash: python -m tox -e $TOXENV
      displayName: Run tests

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFiles: junit/*.xml
        testRunTitle: '$(test_title)'
      condition: succeededOrFailed()


  - job: ToxWithConda

    strategy:
      matrix:
        windows-py36:
          image_name: vs2017-win2016
          test_title: Windows py36
          toxenv: py36
          python: 3.6
        windows-py37:
          image_name: vs2017-win2016
          test_title: Windows py37
          toxenv: py37
          python: 3.7

    pool:
      vmImage: $(image_name)

    steps:
    - task: CondaEnvironment@1
      inputs:
        createCustomEnvironment: true
        environmentName: pymedphys
        packageSpecs: python=$(python) virtualenv pip setuptools shapely pymssql
        updateConda: true
        createOptions: --channel conda-forge

    - bash: "source activate pymedphys && python -c \"import sys; print(sys.version); print(sys.executable)\""
      displayName: Show python information

    - bash: "source activate pymedphys && python -m pip install -U tox --user"
      displayName: Install tox

    - bash: "source activate pymedphys && python -m tox -e $TOXENV --notest"
      displayName: Install test dependencies

    - bash: "source activate pymedphys && python -m tox -e $TOXENV"
      displayName: Run tests

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFiles: junit/*.xml
        testRunTitle: '$(test_title)'
      condition: succeededOrFailed()


  - job: Conda

    strategy:
      matrix:
        mac-py36:
          image_name: macos-10.13
          test_title: macOS py36
          toxenv: py36
          python: 3.6
        mac-py37:
          image_name: macos-10.13
          test_title: macOS py37
          toxenv: py37
          python: 3.7

    pool:
      vmImage: $(image_name)

    steps:
    - task: CondaEnvironment@1
      inputs:
        createCustomEnvironment: true
        environmentName: pymedphys
        packageSpecs: python=$(python) pip pymedphys
        updateConda: true
        createOptions: --channel conda-forge

    - bash: "python -c \"import sys; print(sys.version); print(sys.executable)\""
      displayName: Show python information

    - bash: "pip install -e .[testing]"
      displayName: Install development version of PyMedPhys

    - bash: "pytest -v"
      displayName: Run tests

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFiles: junit/*.xml
        testRunTitle: '$(test_title)'
      condition: succeededOrFailed()


  - job: NotebookOutputs

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - bash: "python -m pip install -U pip setuptools --user"
      displayName: Upgrade pip and setuptools

    - bash: "python -m pip install -U nbstripout --user"
      displayName: Install nbstripout

    - bash: find . -iname \*.ipynb | xargs -d "\n" python -m nbstripout && git add -A && git diff HEAD --name-only --exit-code -- "*ipynb"
      displayName: Check that notebooks have no included output
