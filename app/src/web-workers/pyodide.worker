self.languagePluginUrl = 'https://pyodide.pymedphys.com/'
importScripts('https://pyodide.pymedphys.com/pyodide.js')

import loadWheels from '../python/load-wheels.py';
import setupDirectories from '../python/setup-directories.py';
import setMatplotlibBackend from '../python/set-matplotlib-backend.py';

import {
  receiverMessengers, senderMessengers,
  sendReply, sendFileTransfer
} from '../observables/webworker-messaging';

receiverMessengers.base.subscribe(message => {
  console.log("Received webworker <-- main")
  console.log(message)
})

senderMessengers.base.subscribe(message => {
  console.log("Sending webworker --> main")
  console.log(message)
  self.postMessage(message, message.transferables)
});

self.onmessage = function (e) { // eslint-disable-line no-unused-vars
  receiverMessengers.base.next(e.data)
}

let pythonInitialise = languagePluginLoader.then(() => {
  return Promise.all([
    pyodide.runPython(setupDirectories),
    pyodide.runPython(loadWheels),
    pyodide.loadPackage(['matplotlib', 'numpy', 'pandas'])
  ]).then(() => {
    return pyodide.runPython(setMatplotlibBackend)
  })
})

receiverMessengers.initialise.subscribe(data => {
  const uuid = data.uuid
  pythonInitialise.then(() => {
    sendReply(uuid, {})
  })
})

function convertCode(code) {
  const converted = `
from js import Promise

def run_user_code():
    def run_promise(resolve, reject):
        try:
            exec("""${code}""")
            resolve()
        except Exception as e:
            reject(e)
            raise

    return Promise.new(run_promise)


run_user_code()
`
  console.log(converted)

  return converted
}

receiverMessengers.executeRequest.subscribe(message => {
  const uuid = message.uuid;
  const code = message.data.code;

  pythonInitialise.then(() => {
    self.pyodide.runPython(convertCode(code))
      .then(result => sendReply(uuid, { result }))
      .catch(error => sendReply(uuid, { error }));
  });
})

receiverMessengers.fileTransferRequest.subscribe(message => {
  const uuid = message.uuid
  const filepaths = message.data.filepaths

  let files = []
  filepaths.forEach(filepath => {
    files.push(Module.FS.readFile(filepath))  // TODO: check this doesn't get unlinked
  })

  sendFileTransfer(files, filepaths, uuid)
})

function dirBasenameSplit(filepath) {
  const split = filepath.split('/')
  // console.log(split)
  const basename = split[split.length - 1]
  // console.log(basename)
  const dir = split.slice(0, -1).join('/') + '/'
  // console.log(dir)
  const dirbasename = [dir, basename]

  return dirbasename
}

receiverMessengers.fileTransfer.subscribe(message => {
  const uuid = message.uuid
  const filepath = message.data.filepath
  const file = message.data.file

  if (filepath !== undefined) {
    const dirbasename = dirBasenameSplit(filepath)
    const data = new Uint8Array(file);
    Module['FS_createDataFile'](dirbasename[0], dirbasename[1], data, true, true, true);

    sendReply(uuid, { result: dirbasename[1] })
  }
})