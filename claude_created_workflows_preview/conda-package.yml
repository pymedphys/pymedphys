name: Conda Package

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types:
      - created

jobs:
  build-test:
    name: Build and Test Conda Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git describe to work

      - name: Cache conda packages
        uses: actions/cache@v3
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('conda-recipe/meta.yaml') }}
          restore-keys: |
            conda-${{ runner.os }}-${{ matrix.python-version }}-
            conda-${{ runner.os }}-
            conda-

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge
          channel-priority: strict
          auto-activate-base: true
          activate-environment: ""
          use-only-tar-bz2: true  # For caching to work properly

      - name: Install conda-build
        shell: bash -l {0}
        run: |
          conda install -y conda-build=3.30.0 conda-verify=3.4.2

      - name: Create local recipe for building from source
        run: |
          # Create a modified meta.yaml for local builds
          cat > conda-recipe/meta.local.yaml << 'EOF'
          {% set name = "pymedphys" %}
          {% set version = environ.get('GIT_DESCRIBE_TAG', '0.0.0').lstrip('v') %}

          package:
            name: {{ name|lower }}
            version: {{ version }}

          source:
            path: ..

          build:
            number: 0
            noarch: python
            script: {{ PYTHON }} -m pip install . -vv
            entry_points:
              - pymedphys = pymedphys.__main__:main

          requirements:
            host:
              - python >=3.10,<3.13
              - pip
              - poetry-core >=1.0.0
            run:
              - python >=3.10,<3.13
              - typing-extensions
              - setuptools
              - tomlkit
              # Core user dependencies
              - tqdm
              - attrs
              - watchdog
              - keyring
              - packaging
              - pyyaml
              - requests
              - python-dateutil
              - matplotlib-base
              - scipy
              - pymssql  # [not win]
              - sqlalchemy
              - natsort
              - toml
              - pynetdicom
              - dbfread
              - xmltodict
              - timeago
              - dicompyler-core
              - scikit-learn
              - imageio
              - streamlit >=1.34.0,<1.35.0
              - numba
              - numpy >=1.26
              - pandas >=1.0.0
              - pydicom >=2.0.0
              - shapely >=1.7.0
              - pylibjpeg-libjpeg >=1.3.2
              - anthropic ==0.46.0
              - trio >=0.25.0
              - trio-asyncio
              - anyio
              - plotly >=5.24.1
              - dash >=2.18.1
              - pillow >=9.0.0
              - ipython >=7.31.1
              - pywin32 >=301  # [win]

          test:
            imports:
              - pymedphys
              - pymedphys.dicom
              - pymedphys.gamma
              - pymedphys.metersetmap
              - pymedphys.trf
            commands:
              - pymedphys --help
              - pymedphys --version
            requires:
              - pip

          about:
            home: https://pymedphys.com
            summary: Medical Physics library
            description: |
              PyMedPhys is a medical physics library that provides tools for
              various medical physics applications including:
              - DICOM handling and anonymization
              - Gamma analysis for dose distribution comparison
              - Treatment delivery data processing (TRF, iCOM)
              - Integration with oncology information systems (Mosaiq)
              - Electron factor calculations
              - And more...
            license: Apache-2.0
            license_family: Apache
            license_file: LICENSE
            doc_url: https://docs.pymedphys.com
            dev_url: https://github.com/pymedphys/pymedphys

          extra:
            recipe-maintainers:
              - SimonBiggs
              - sjswerdloff
              - Matthew-Jennings
              - pchlap
          EOF

      - name: Build conda package
        shell: bash -l {0}
        run: |
          # Build using the local recipe
          conda build conda-recipe/meta.local.yaml --output-folder ./conda-bld

      - name: Test package installation
        shell: bash -l {0}
        run: |
          # Create and activate a test environment
          conda create -n test-env python=${{ matrix.python-version }} -y

          # Install the built package
          conda install -n test-env -c ./conda-bld pymedphys -y

          # Test import using conda run
          conda run -n test-env python -c "import pymedphys; print(f'PyMedPhys {pymedphys.__version__} imported successfully')"

          # Run basic CLI command
          conda run -n test-env pymedphys --version

      - name: Upload conda package
        uses: actions/upload-artifact@v3
        with:
          name: conda-package-${{ matrix.os }}-py${{ matrix.python-version }}
          path: ./conda-bld/*/pymedphys-*.tar.bz2

  test-from-conda-forge:
    name: Test Installation from conda-forge
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the workflow if package isn't on conda-forge yet

    steps:
      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.11"
          channels: conda-forge
          channel-priority: strict

      - name: Try installing from conda-forge
        shell: bash -l {0}
        run: |
          conda install -c conda-forge pymedphys -y || echo "Package not available on conda-forge yet"
          python -c "import pymedphys; print(f'PyMedPhys {pymedphys.__version__} from conda-forge')" || echo "Could not import from conda-forge"

  release-guidance:
    name: Provide Release Guidance
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Generate conda-forge update instructions
        id: generate-instructions
        run: |
          # Get release tag
          RELEASE_TAG="${GITHUB_REF#refs/tags/}"

          # Create release instructions
          cat > release-instructions.md << EOF
          ## Conda-forge Update Instructions for PyMedPhys ${RELEASE_TAG}

          A new release has been created. To update the conda-forge feedstock:

          ### 1. Wait for PyPI Package
          First, ensure the PyPI package has been uploaded for version ${RELEASE_TAG}.

          ### 2. Get the SHA256 Hash
          Run this command to get the SHA256 hash of the PyPI tarball:
          \`\`\`bash
          curl -sL https://pypi.io/packages/source/p/pymedphys/pymedphys-${RELEASE_TAG}.tar.gz | sha256sum
          \`\`\`

          ### 3. Fork and Update the Feedstock
          1. Fork https://github.com/conda-forge/pymedphys-feedstock if you haven't already
          2. Create a new branch for the update
          3. Update \`recipe/meta.yaml\`:
             - Update the version to ${RELEASE_TAG}
             - Update the SHA256 hash
             - Review and update any changed dependencies
             - Update build number to 0 (if it was incremented for rebuilds)

          ### 4. Create Pull Request
          1. Push your changes to your fork
          2. Create a PR to conda-forge/pymedphys-feedstock
          3. Title: "Update to version ${RELEASE_TAG}"
          4. The conda-forge bot will automatically check the recipe

          ### 5. Merge and Distribution
          Once the PR is approved and merged:
          - The conda-forge bot will automatically build packages for all platforms
          - Packages will be available on conda-forge within a few hours

          ### Maintainers
          Recipe maintainers who can merge PRs:
          - SimonBiggs
          - sjswerdloff
          - Matthew-Jennings
          - pchlap
          EOF

          # Also output to console for visibility
          echo "::group::Release Instructions"
          cat release-instructions.md
          echo "::endgroup::"

      - name: Upload release instructions
        uses: actions/upload-artifact@v3
        with:
          name: conda-forge-release-instructions
          path: release-instructions.md
