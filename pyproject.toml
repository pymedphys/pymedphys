[tool.poetry]
name = "pymedphys"
version = "0.41.0-dev0"
readme = "README.rst"
description = "Medical Physics library"
authors = ["PyMedPhys Contributors <developers@pymedphys.com>"]
license = "Apache-2.0"
homepage = "https://pymedphys.com"
repository = "https://github.com/pymedphys/pymedphys"
documentation = "https://docs.pymedphys.com"
classifiers = [
    "Development Status :: 4 - Beta",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
]

packages = [{ include = "pymedphys", from = "lib" }]
include = ["lib/pymedphys/docs/_build/html/**/*"]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
typing-extensions = "*"
setuptools = "*"
tomlkit = "*"


# ------- #
# Library #
# ------- #

tqdm = { version = "*", optional = true }     # groups = ["user", "all", "tests", "docs"]
attrs = { version = "*", optional = true }    # groups = ["user", "all", "mosaiq"]
watchdog = { version = "*", optional = true } # groups = ["user", "all"]

keyring = { version = "*", optional = true }         # groups = ["user", "all"]
packaging = { version = "*", optional = true }       # groups = ["user", "all"]
PyYAML = { version = "*", optional = true }          # groups = ["user", "all"]
requests = { version = "*", optional = true }        # groups = ["user", "all"]
python-dateutil = { version = "*", optional = true } # groups = ["user", "all", "tests"]

matplotlib = { version = "<3.8.0", optional = true } # groups = ["user", "all", "docs"]
scipy = { version = "*", optional = true }           # groups = ["user", "all", "docs"]

pymssql = { version = "*", optional = true }    # groups = ["user", "all", "mosaiq"]
sqlalchemy = { version = "*", optional = true } # groups = ["user", "all", "mosaiq"]
natsort = { version = "*", optional = true }    # groups = ["user", "all"]
toml = { version = "*", optional = true }       # groups = ["user", "cli", "all", "mosaiq", "docs"]

pynetdicom = { version = "*", optional = true } # groups = ["user", "all", "dicom"]

dbfread = { version = "*", optional = true }         # groups = ["user", "all"]
xmltodict = { version = "*", optional = true }       # groups = ["user", "all"]
timeago = { version = "*", optional = true }         # groups = ["user", "all"]
dicompyler-core = { version = "*", optional = true } # groups = ["user", "all"]
scikit-learn = { version = "*", optional = true }    # groups = ["user", "all", "mosaiq"]
imageio = { version = "*", optional = true }         # groups = ["user", "all"]

streamlit = { version = "~1.34.0", optional = true } # groups = ["user", "all"]

# Upper pin for Econforge `interpolation` compatibility. Plan to remove.
numba = { version = "<0.60.0", optional = true } # groups = ["user", "all", "docs", "tests"]

numpy = { version = ">=1.26", optional = true } # groups = ["user", "all", "icom", "docs"]

# The following lower bounded packages are due to certain APIs utilised
pandas = { version = ">=1.0.0", optional = true }  # groups = ["user", "all", "mosaiq"]
pydicom = { version = ">=2.0.0", optional = true } # groups = ["user", "all", "dicom", "docs"]

# The following lower bounds are so that the versions with wheels are utilised
# for the installation
shapely = { version = ">=1.7.0", optional = true } # groups = ["user", "all"]

pylibjpeg-libjpeg = { version = ">=1.3.2", optional = true } # groups = ["user", "all"]

# AI
anthropic = { version = "0.25.9", optional = true } # groups = ["user", "all"]
trio = { version = ">=0.25.0", optional = true }    # groups = ["user", "all"]
trio-asyncio = { version = "*", optional = true }   # groups = ["user", "all"]
anyio = { version = "*", optional = true }          # groups = ["user", "all"]

# ---- #
# CVEs #
# ---- #

# CVE-2021-32559 <https://github.com/advisories/GHSA-hwfp-hg2m-9vr2>
pywin32 = { version = ">=301", optional = true, platform = "win32" } # groups = ["user", "all"]
# CVE-2022-21699 <https://github.com/advisories/GHSA-pq7m-3gw7-gq5x>
ipython = { version = ">=7.31.1", optional = true } # groups = ["docs", "all"]
# CVE-2022-22817 <https://github.com/advisories/GHSA-8vj2-vxx3-667w>
Pillow = { version = ">=9.0.0", optional = true } # groups = ["user", "all"]

# ----------- #
# Comparables #
# ----------- #
flashgamma = { version = "*", optional = true } # groups = ["comparables"]

# -------- #
# Speedups #
# -------- #

# Many environments have issue with installing llvmlite, so, until it is more
# reliable, don't include this dependency in the standard install.
interpolation = { version = ">=2.1.0", optional = true } # groups = ["speedups"]

# ------------- #
# Documentation #
# ------------- #
sphinx-argparse = { version = "*", optional = true } # groups = ["all", "docs"]
# sphinx-ext-napoleon = { version = "*", optional = true }  # groups = ["all", "docs"]
sphinx-book-theme = { version = "*", optional = true }   # groups = ["all", "docs", "doctests"]
jupyter-book = { version = ">=0.12.0", optional = true } # groups = ["all", "docs"]
networkx = { version = "*", optional = true }            # groups = ["all", "docs"]

# ----- #
# Tests #
# ----- #
pytest = { version = "*", optional = true }               # groups = ["all", "tests"]
pytest-sugar = { version = "*", optional = true }         # groups = ["all", "tests"]
astroid = { version = "*", optional = true }              # groups = ["all", "tests"]
psutil = { version = "*", optional = true }               # groups = ["all", "tests"]
pylint = { version = "*", optional = true }               # groups = ["all", "tests"]
pytest-rerunfailures = { version = "*", optional = true } # groups = ["all", "tests"]

# ---------------- #
# Development Only #
# ---------------- #
pre-commit = { version = "*", optional = true }      # groups = ["dev", "all"]
ruff = { version = "0.4.1", optional = true }        # groups = ["dev", "all", "propagate", "doctests"]
pyright = { version = "1.1.359", optional = true }   # groups = ["dev", "all"]
rope = { version = "*", optional = true }            # groups = ["dev", "all"]
doc8 = { version = "*", optional = true }            # groups = ["dev", "all"]
readme-renderer = { version = "*", optional = true } # groups = ["dev", "all"]
tabulate = { version = "*", optional = true }        # groups = ["dev", "all", "doctests"]

[tool.poetry.extras]
all = [
    "Pillow",
    "PyYAML",
    "anthropic",
    "anyio",
    "astroid",
    "attrs",
    "dbfread",
    "dicompyler-core",
    "doc8",
    "imageio",
    "ipython",
    "jupyter-book",
    "keyring",
    "matplotlib",
    "natsort",
    "networkx",
    "numba",
    "numpy",
    "packaging",
    "pandas",
    "pre-commit",
    "psutil",
    "pydicom",
    "pylibjpeg-libjpeg",
    "pylint",
    "pymssql",
    "pynetdicom",
    "pyright",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "python-dateutil",
    "pywin32",
    "readme-renderer",
    "requests",
    "rope",
    "ruff",
    "scikit-learn",
    "scipy",
    "shapely",
    "sphinx-argparse",
    "sphinx-book-theme",
    "sqlalchemy",
    "streamlit",
    "tabulate",
    "timeago",
    "toml",
    "tqdm",
    "trio",
    "trio-asyncio",
    "watchdog",
    "xmltodict",
]
cli = ["toml"]
comparables = ["flashgamma"]
dev = [
    "doc8",
    "pre-commit",
    "pyright",
    "readme-renderer",
    "rope",
    "ruff",
    "tabulate",
]
dicom = ["pydicom", "pynetdicom"]
docs = [
    "ipython",
    "jupyter-book",
    "matplotlib",
    "networkx",
    "numba",
    "numpy",
    "pydicom",
    "scipy",
    "sphinx-argparse",
    "sphinx-book-theme",
    "toml",
    "tqdm",
]
doctests = ["ruff", "sphinx-book-theme", "tabulate"]
icom = ["numpy"]
mosaiq = ["attrs", "pandas", "pymssql", "scikit-learn", "sqlalchemy", "toml"]
propagate = ["ruff"]
speedups = ["interpolation"]
tests = [
    "astroid",
    "psutil",
    "pylint",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "python-dateutil",
    "tqdm",
]
user = [
    "Pillow",
    "PyYAML",
    "anthropic",
    "anyio",
    "attrs",
    "dbfread",
    "dicompyler-core",
    "imageio",
    "keyring",
    "matplotlib",
    "natsort",
    "numba",
    "numpy",
    "packaging",
    "pandas",
    "pydicom",
    "pylibjpeg-libjpeg",
    "pymssql",
    "pynetdicom",
    "python-dateutil",
    "pywin32",
    "requests",
    "scikit-learn",
    "scipy",
    "shapely",
    "sqlalchemy",
    "streamlit",
    "timeago",
    "toml",
    "tqdm",
    "trio",
    "trio-asyncio",
    "watchdog",
    "xmltodict",
]

[tool.poetry.scripts]
pymedphys = "pymedphys.__main__:main"

[tool.ruff.lint]
# These were the existing issues when first migrating to ruff, we can feel
# free to remove these an iteratively tighten the belt if so desired.
extend-ignore = [
    # "F401", # imported but unused
    # "E741", # Ambiguous variable name
    # "E722", # Do not use bare `except`
]


[tool.ruff.lint.isort]
known-third-party = ["pymedphys._imports"]
known-first-party = ["pymedphys"]

[tool.pyright]
include = ["lib/pymedphys"]

# These have been set to False in order to be able to utilise pyright, but
# future work would be to iteratively set these to true and fix the code base.
reportMissingImports = false
reportGeneralTypeIssues = false
reportUnboundVariable = false
reportOptionalMemberAccess = false
reportOptionalSubscript = false
reportOptionalOperand = false
reportOptionalCall = false
reportOptionalIterable = false
reportPrivateImportUsage = false
reportArgumentType = false
reportCallIssue = false
reportOperatorIssue = false
reportAttributeAccessIssue = false
reportAssignmentType = false
reportIndexIssue = false
reportReturnType = false
reportMissingModuleSource = false
reportTypedDictNotRequiredAccess = false

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
