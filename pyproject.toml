[tool.poetry]
name = "pymedphys"
version = "0.38.0"
readme = "lib/pymedphys/docs/README.rst"
description = "Medical Physics library"
authors = [
    "PyMedPhys Contributors <developers@pymedphys.com>",
    "Simon Biggs <sbiggs@pymedphys.com>",
    "Stuart Swerdloff",
    "Matthew Jennings <mjennings@pymedphys.com>",
    "Phillip Chlap",
    "Derek Lane",
    "Jake Rembish",
    "Matthew Cooper <mcooper@pymedphys.com>",
    "Pedro Martinez",
    "Rafael Ayala",
]
license = "Apache-2.0"
homepage = "https://pymedphys.com"
repository = "https://github.com/pymedphys/pymedphys"
documentation = "https://docs.pymedphys.com"
classifiers = [
    "Development Status :: 4 - Beta",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
]

packages = [{ include = "pymedphys", from = "lib" }]
include = ["lib/pymedphys/docs/_build/html/**/*"]

[tool.poetry.dependencies]
python = ">=3.8,<3.11"
typing-extensions = "*"


# ------- #
# Library #
# ------- #
tqdm = { version = "*", optional = true }     # groups = ["user", "dev", "tests"]
attrs = { version = "*", optional = true }    # groups = ["user", "dev"]
watchdog = { version = "*", optional = true } # groups = ["user", "dev"]

keyring = { version = "*", optional = true }         # groups = ["user", "dev"]
packaging = { version = "*", optional = true }       # groups = ["user", "dev"]
PyYAML = { version = "*", optional = true }          # groups = ["user", "dev"]
requests = { version = "*", optional = true }        # groups = ["user", "dev"]
python-dateutil = { version = "*", optional = true } # groups = ["user", "dev", "tests"]

matplotlib = { version = "*", optional = true } # groups = ["user", "dev"]
scipy = { version = "*", optional = true }      # groups = ["user", "dev"]

xarray = { version = "*", optional = true } # groups = ["user", "dev"]

pymssql = { version = "*", optional = true }       # groups = ["user", "dev", "mosaiq"]
sqlalchemy = { version = "*", optional = true }    # groups = ["user", "dev", "mosaiq"]
natsort = { version = "*", optional = true }       # groups = ["user", "dev"]
tomlkit = { version = "*", optional = true }       # groups = ["user", "dev", "propagate"]
toml = { version = "*", optional = true }          # groups = ["user", "cli", "dev", "mosaiq"]

pynetdicom = { version = "*", optional = true } # groups = ["user", "dev", "dicom"]

dbfread = { version = "*", optional = true }           # groups = ["user", "dev"]
xmltodict = { version = "*", optional = true }         # groups = ["user", "dev"]
timeago = { version = "*", optional = true }           # groups = ["user", "dev"]
xlsxwriter = { version = "*", optional = true }        # groups = ["user", "dev"]
plotly = { version = "*", optional = true }            # groups = ["user", "dev"]
fsspec = { version = "*", optional = true }            # groups = ["user", "dev"]
dicompyler-core = { version = "*", optional = true }   # groups = ["user", "dev"]
scikit-learn = { version = "*", optional = true }      # groups = ["user", "dev", "mosaiq"]
imageio = { version = "*", optional = true }           # groups = ["user", "dev"]
pylibjpeg-libjpeg = { version = "*", optional = true } # groups = ["user", "dev"]

# NumPy's lower bound here is for typing support
numpy = { version = ">=1.20.2", optional = true } # groups = ["user", "dev", "icom"]

# The following lower bounded packages are due to certain APIs utilised
pandas = { version = ">=1.0.0", optional = true }  # groups = ["user", "dev", "mosaiq"]
pydicom = { version = ">=2.0.0", optional = true } # groups = ["user", "dev", "dicom"]


# The following lower bounds are so that the versions with wheels are utilised
# for the installation
shapely = { version = ">=1.7.0", optional = true }       # groups = ["user", "dev"]
scikit-image = { version = ">=0.18.1", optional = true } # groups = ["user", "dev"]

# Streamlit's pinning is due to its current beta nature and the fact that some
# private APIs are utilised.
protobuf = { version = "<3.19.0", optional = true }    # groups = ["user", "dev"]
streamlit = { version = "1.4.0", optional = true }     # groups = ["user", "dev"]
streamlit-ace = { version = "0.1.0", optional = true } # groups = ["user", "dev"]

# PyLinac is pinned due to historical algorithm changes with both minor and
# patch version bumps.
pylinac = { version = "2.3.2", optional = true } # groups = ["user", "dev", "doctests"]

# ---- #
# CVEs #
# ---- #

# CVE-2020-28463 <https://github.com/advisories/GHSA-mpvw-25mg-59vx>
reportlab = { version = ">=3.6", optional = true } # groups = ["user", "dev"]
# CVE-2021-32559 <https://github.com/advisories/GHSA-hwfp-hg2m-9vr2>
pywin32 = { version = ">=301", optional = true, platform = "win32" } # groups = ["user", "dev"]
# CVE-2022-21699 <https://github.com/advisories/GHSA-pq7m-3gw7-gq5x>
ipython = { version = ">=7.31.1", optional = true }
# CVE-2022-22817 <https://github.com/advisories/GHSA-8vj2-vxx3-667w>
Pillow = { version = ">=9.0.0", optional = true } # groups = ["user", "dev"]


# ----------- #
# Comparables #
# ----------- #
flashgamma = { version = "*", optional = true } # groups = ["comparables"]

# ---------------- #
# Machine Learning #
# ---------------- #
# The following dependency was removed due to it coming with a numpy upper
# bound. I don't want dependencies that have an upper bound on numpy.

# tensorflow = { version = ">=2.4.0", optional = true }  # groups = ["ml", "doctests"]

# ------------- #
# Documentation #
# ------------- #
sphinx-argparse = { version = "*", optional = true } # groups = ["dev", "docs"]
# sphinx-ext-napoleon = { version = "*", optional = true }  # groups = ["dev", "docs"]
sphinx-book-theme = { version = "*", optional = true }   # groups = ["dev", "docs", "doctests"]
jupyter-book = { version = ">=0.12.0", optional = true } # groups = ["dev", "docs"]
networkx = { version = "*", optional = true }            # groups = ["dev", "docs"]

# ----- #
# Tests #
# ----- #
pytest = { version = "*", optional = true }               # groups = ["dev", "tests"]
pytest-sugar = { version = "*", optional = true }         # groups = ["dev", "tests"]
hypothesis = { version = "<6", optional = true }          # groups = ["dev", "tests"]
astroid = { version = "*", optional = true }              # groups = ["dev", "tests"]
psutil = { version = "*", optional = true }               # groups = ["dev", "tests"]
pylint = { version = "*", optional = true }               # groups = ["dev", "tests"]
pytest-rerunfailures = { version = "*", optional = true } # groups = ["dev", "tests"]

# ---------------- #
# Development Only #
# ---------------- #
pre-commit = { version = "*", optional = true }      # groups = ["dev"]
black = { version = "^22.3.0", optional = true }     # groups = ["dev", "propagate", "doctests"]
mypy = { version = "*", optional = true }            # groups = ["dev"]
rope = { version = "*", optional = true }            # groups = ["dev"]
doc8 = { version = "*", optional = true }            # groups = ["dev"]
readme-renderer = { version = "*", optional = true } # groups = ["dev"]
tabulate = { version = "*", optional = true }        # groups = ["dev", "doctests"]
pyoxidizer = { version = "*", optional = true }      # groups = ["dev"]


[tool.poetry.extras]
cli = ["toml"]
comparables = ["flashgamma"]
dev = [
    "Pillow",
    "PyYAML",
    "astroid",
    "attrs",
    "black",
    "dbfread",
    "dicompyler-core",
    "doc8",
    "fsspec",
    "hypothesis",
    "imageio",
    "jupyter-book",
    "keyring",
    "matplotlib",
    "mypy",
    "natsort",
    "networkx",
    "numpy",
    "packaging",
    "pandas",
    "plotly",
    "pre-commit",
    "protobuf",
    "psutil",
    "pydicom",
    "pylibjpeg-libjpeg",
    "pylinac",
    "pylint",
    "pymssql",
    "pynetdicom",
    "pyoxidizer",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "python-dateutil",
    "pywin32",
    "readme-renderer",
    "reportlab",
    "requests",
    "rope",
    "scikit-image",
    "scikit-learn",
    "scipy",
    "shapely",
    "sphinx-argparse",
    "sphinx-book-theme",
    "sqlalchemy",
    "streamlit",
    "streamlit-ace",
    "tabulate",
    "timeago",
    "toml",
    "tomlkit",
    "tqdm",
    "watchdog",
    "xarray",
    "xlsxwriter",
    "xmltodict",
]
dicom = ["pydicom", "pynetdicom"]
docs = ["jupyter-book", "networkx", "sphinx-argparse", "sphinx-book-theme"]
doctests = ["black", "pylinac", "sphinx-book-theme", "tabulate"]
icom = ["numpy"]
mosaiq = ["pandas", "pymssql", "scikit-learn", "sqlalchemy", "toml"]
propagate = ["black", "tomlkit"]
tests = [
    "astroid",
    "hypothesis",
    "psutil",
    "pylint",
    "pytest",
    "pytest-rerunfailures",
    "pytest-sugar",
    "python-dateutil",
    "tqdm",
]
user = [
    "Pillow",
    "PyYAML",
    "attrs",
    "dbfread",
    "dicompyler-core",
    "fsspec",
    "imageio",
    "keyring",
    "matplotlib",
    "natsort",
    "numpy",
    "packaging",
    "pandas",
    "plotly",
    "protobuf",
    "pydicom",
    "pylibjpeg-libjpeg",
    "pylinac",
    "pymssql",
    "pynetdicom",
    "python-dateutil",
    "pywin32",
    "reportlab",
    "requests",
    "scikit-image",
    "scikit-learn",
    "scipy",
    "shapely",
    "sqlalchemy",
    "streamlit",
    "streamlit-ace",
    "timeago",
    "toml",
    "tomlkit",
    "tqdm",
    "watchdog",
    "xarray",
    "xlsxwriter",
    "xmltodict",
]

[tool.poetry.scripts]
pymedphys = "pymedphys.__main__:main"

[tool.isort]
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

known_third_party = ["pymedphys._imports"]
known_general_scientific = [
    "numpy",
    "scipy",
    "pandas",
    "imageio",
    "PIL",
    "skimage",
    "matplotlib",
    "mpl_toolkits",
    "shapely",
    "altair",
    "sklearn",
    "plotly",
]
known_machine_learning = ["tensorflow", "pytorch"]
known_streamlit = ["streamlit", "streamlit_ace", "streamlit_analytics"]
known_medphys = [
    "pydicom",
    "pylinac",
    "pynetdicom",
    "libjpeg",
    "dicompylercore",
]
known_first_party = ["pymedphys"]
known_experimental = ["pymedphys._experimental"]
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "GENERAL_SCIENTIFIC",
    "MACHINE_LEARNING",
    "STREAMLIT",
    "MEDPHYS",
    "FIRSTPARTY",
    "EXPERIMENTAL",
    "LOCALFOLDER",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
