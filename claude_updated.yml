name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'

      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.5
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache Poetry virtual environment
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          poetry install -E all

      - name: Install Node dependencies
        run: |
          npm install -g pyright@1.1.386

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          model: claude-opus-4-20250514
          allowed_tools: >
            View,
            Edit,
            Write,
            GlobTool,
            GrepTool,
            Bash(git status),
            Bash(git log),
            Bash(git log --oneline),
            Bash(git diff),
            Bash(git diff --staged),
            Bash(git diff HEAD),
            Bash(git branch),
            Bash(git branch -a),
            Bash(git remote -v),
            Bash(git config user.name),
            Bash(git config user.email),
            Bash(git fetch),
            Bash(git fetch origin),
            Bash(git checkout -b),
            Bash(git checkout),
            Bash(git branch -D),
            Bash(git merge),
            Bash(git add),
            Bash(git add .),
            Bash(git add -A),
            Bash(git commit -m),
            Bash(git commit --amend),
            Bash(git reset),
            Bash(git reset --hard),
            Bash(git push),
            Bash(git push origin),
            Bash(git push -u origin),
            Bash(gh auth status),
            Bash(gh pr create),
            Bash(gh pr create --title),
            Bash(gh pr list),
            Bash(gh pr view),
            Bash(gh pr comment),
            Bash(gh issue comment),
            Bash(poetry install),
            Bash(poetry install -E all),
            Bash(poetry run pymedphys:*),
            Bash(poetry run pymedphys dev tests),
            Bash(poetry run pymedphys dev tests -v),
            Bash(poetry run pymedphys dev tests --slow),
            Bash(poetry run pymedphys dev tests --cypress),
            Bash(poetry run pymedphys dev doctests),
            Bash(poetry run pymedphys dev doctests -v),
            Bash(poetry run pymedphys dev docs),
            Bash(poetry run pymedphys dev lint),
            Bash(poetry run pymedphys dev imports),
            Bash(poetry run pytest),
            Bash(poetry run pre-commit run),
            Bash(poetry run pre-commit run --all-files),
            Bash(poetry run pre-commit install),
            Bash(poetry add),
            Bash(poetry remove),
            Bash(poetry update),
            Bash(poetry lock),
            Bash(poetry lock --no-update),
            Bash(poetry show),
            Bash(poetry show --tree),
            Bash(poetry show --outdated),
            Bash(poetry check),
            Bash(poetry version),
            Bash(poetry env info),
            Bash(poetry env use),
            Bash(poetry cache clear),
            Bash(poetry config virtualenvs.in-project true),
            Bash(uv pip install),
            Bash(uv pip install -e),
            Bash(uv pip install -r),
            Bash(uv venv),
            Bash(uv run),
            Bash(uv sync),
            Bash(uv lock),
            Bash(uv add),
            Bash(uv remove),
            Bash(uv tool install),
            Bash(uv tool run),
            Bash(poetry run ruff check),
            Bash(poetry run ruff check --fix),
            Bash(poetry run ruff check --fix .),
            Bash(poetry run ruff format),
            Bash(poetry run ruff format .),
            Bash(poetry run pyright),
            Bash(poetry run mypy),
            Bash(uv run ruff check),
            Bash(uv run ruff check --fix),
            Bash(uv run ruff format),
            Bash(uv run pyright),
            Bash(uv run mypy),
            Bash(pyright),
            Bash(python -m pip install --upgrade pip),
            Bash(python -m pip install --upgrade setuptools),
            Bash(npm install -g pyright@1.1.386),
            Bash(ls),
            Bash(ls -la),
            Bash(pwd),
            Bash(cat),
            Bash(head),
            Bash(tail),
            Bash(which),
            Bash(echo),
            Bash(find),
            Bash(grep),
            Bash(sed),
            Bash(awk),
            Bash(mkdir),
            Bash(rm),
            Bash(cp),
            Bash(mv),
            Bash(touch),
            Bash(chmod),
            Bash(chown),
            Bash(df),
            Bash(du),
            Bash(tar),
            Bash(zip),
            Bash(unzip),
            Bash(curl),
            Bash(wget),
            Bash(ps),
            Bash(kill),
            Bash(env),
            Bash(export),
            Bash(source),
            Bash(npm),
            Bash(node),
            Bash(python),
            Bash(python3),
            Bash(pip),
            Bash(pip3),
            mcp__github_file_ops__commit_files,
            mcp__github__create_pull_request
        env:
          FORCE_COLOR: 'true'