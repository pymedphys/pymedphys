{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Gamma from DICOM\n",
    "\n",
    "PyMedPhys has multiple ways to calculate Gamma. There are also a range of interfaces that can be used. Presented here is a simplified interface which receives as its input two DICOM file paths for the purpose of directly calculating Gamma from a pair of RT DICOM dose files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import warnings\n",
    "import urllib.request\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from pymedphys.gamma import gamma_dicom"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Downloading the DICOM files\n",
    "\n",
    "For the purpose of this example we will be downloading two DICOM files. This code below achieves this download. It would not be required if you already have a pair of DICOM files on your computer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def download_and_save_zenodo_file(url):\n",
    "    file_name = url.split('/')[-1]\n",
    "    \n",
    "    if not os.path.exists(file_name):\n",
    "        request = urllib.request.urlopen(url)  \n",
    "        file_object = request.read()\n",
    "        \n",
    "        with open(file_name, 'wb') as a_file:\n",
    "            a_file.write(file_object)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A range of files for PyMedPhys are stored at [Zenodo](https://zenodo.org/communities/pymedphys/), here are two DICOM files that are used for Gamma comparison."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "evaluation_url = 'https://zenodo.org/record/2614021/files/data_evaluation.dcm'\n",
    "reference_url = 'https://zenodo.org/record/2614021/files/data_reference.dcm'\n",
    "\n",
    "for url in [evaluation_url, reference_url]:\n",
    "    download_and_save_zenodo_file(url)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculate and display Gamma\n",
    "\n",
    "Due to the time it takes to run a full Gamma calculation we have chosen here to pass the parameter `random_subset`. This drastically speeds up the calculation at the cost of introducing uncertainty into reported pass rates. Each time these docs are built online the code is run, we don't want to bog the documentation building down in a Gamma calc, so we apply this parameter here.\n",
    "\n",
    "A second optional parameter is also passed, `max_gamma`. This informs the Gamma calculation to not search for Gamma values greater than `1.1`, this also speeds up the calculation at the expense of losing some information.\n",
    "\n",
    "The required parameters to `gamma_dicom` are `dicom_ref_filepath`, `dicom_eval_filepath`, `dose_percent_threshold`, and `distance_mm_threshold`.\n",
    "\n",
    "These commands below have been wrapped up in a function simply so that they can be easily run three times to demonstrate the uncertainty introduced by using the `random_subset` parameter. Although it will certainly depend on the DICOM datasets being compared, we have found that a `random_subset` of 50 000 tends to converge on a consistent pass rate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_gamma_and_display():\n",
    "    max_gamma = 1.1\n",
    "    \n",
    "    gamma = gamma_dicom(\n",
    "        \"data_reference.dcm\", \"data_evaluation.dcm\", 3, 3, \n",
    "        random_subset=1000, max_gamma=max_gamma)\n",
    "\n",
    "    valid_gamma = gamma[~np.isnan(gamma)]\n",
    "    plt.hist(valid_gamma, 30)\n",
    "    plt.xlim([0, max_gamma])\n",
    "\n",
    "    pass_ratio = np.sum(valid_gamma <= 1) / len(valid_gamma)\n",
    "\n",
    "    plt.title(\"Gamma Percent Pass: {0:.2f} %\".format(pass_ratio*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You'll notice in this first calculation that there are two warning messages. One about a function called `load_xyz_from_dicom`, the second `load_dose_from_dicom`. These functions are used internally by `gamma_dicom`. The first of these internal functions is going to be removed in a future version, the second of these will have its API changed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "calculate_gamma_and_display()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following plots are simply repeats of the above calculation with the previously seen warning supressed. Depending on randomness you'll possibly see deviations on the order of ~4% for this dataset with a `random_subset` set to 1 000.\n",
    "\n",
    "Try clicking the \"launch binder\" link at the top of this page to run this notebook live online and change the `random_subset` to something more like 50 000 to see the impact."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with warnings.catch_warnings():\n",
    "    warnings.simplefilter(\"ignore\")\n",
    "    calculate_gamma_and_display()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with warnings.catch_warnings():\n",
    "    warnings.simplefilter(\"ignore\")\n",
    "    calculate_gamma_and_display()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
